[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "video-generation-agents"
version = "0.1.0"
description = "Multi-agent video generation system with FastAPI, LangGraph and AWS integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Video Generation Team", email = "team@videogen.com"}
]
maintainers = [
    {name = "Video Generation Team", email = "team@videogen.com"}
]
keywords = ["fastapi", "video-generation", "langgraph", "aws", "manim", "rag", "agents"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Video",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    # FastAPI and Web Framework
    "fastapi>=0.115.0,<1.0.0",
    "uvicorn[standard]>=0.32.0,<1.0.0",
    "python-multipart>=0.0.12,<1.0.0",
    "starlette>=0.41.0,<1.0.0",
    "jinja2>=3.1.4,<4.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "slowapi>=0.1.9,<1.0.0",
    
    # Database and ORM
    "sqlalchemy>=2.0.36,<3.0.0",
    "alembic>=1.14.0,<2.0.0",
    "asyncpg>=0.30.0,<1.0.0",
    "psycopg2-binary>=2.9.10,<3.0.0",
    
    # Core dependencies
    "pydantic>=2.9.2,<3.0.0",
    "pydantic-settings>=2.0.3,<3.0.0",
    "python-dotenv>=0.21.1,<2.0.0",
    "typing-extensions>=4.12.2,<5.0.0",
    
    # LangGraph and AI
    "langgraph>=0.2.60,<1.0.0",
    "langchain>=0.3.14,<1.0.0",
    "langchain-community>=0.3.14,<1.0.0",
    "langchain-aws",
    "openai>=1.61.0,<2.0.0",
    "tiktoken>=0.8.0,<1.0.0",
    "litellm>=1.60.5,<2.0.0",
    
    # AWS Integration
    "boto3>=1.36.9,<2.0.0",
    "botocore>=1.34.0,<2.0.0",
    
    # Video Generation and Manim
    "manim>=0.18.1,<1.0.0",
    "manim-voiceover>=0.3.7,<1.0.0",
    "manim-physics>=0.4.0,<1.0.0",
    "manim-ml>=0.0.24,<1.0.0",
    "manim-chemistry>=0.4.4,<1.0.0",
    "manim-dsa>=0.2.0,<1.0.0",
    "manim-circuit>=0.0.3,<1.0.0",
    
    # Audio and TTS
    "gTTS>=2.5.3,<3.0.0",
    "azure-cognitiveservices-speech>=1.41.1,<2.0.0",
    "pydub>=0.25.1,<1.0.0",
    "PyAudio>=0.2.14,<1.0.0",
    "soundfile>=0.13.1,<1.0.0",
    "kokoro-onnx",
    
    # Video Processing
    "moviepy>=2.1.2,<3.0.0",
    "opencv-python>=4.11.0,<5.0.0",
    "ffmpeg-python>=0.2.0,<1.0.0",
    "imageio-ffmpeg>=0.5.1,<1.0.0",
    
    # RAG and Vector Stores
    "chromadb>=0.6.3,<1.0.0",
    "langfuse>=2.58.1,<3.0.0",
    
    # Google AI
    "google-generativeai>=0.8.3,<1.0.0",
    "google-cloud-aiplatform>=1.79.0,<2.0.0",
    
    # Utilities
    "requests>=2.32.3,<3.0.0",
    "httpx>=0.27.0,<1.0.0",
    "aiohttp>=3.9.0,<4.0.0",
    "websockets>=12.0,<13.0",
    "rich>=13.9.3,<14.0.0",
    "click>=8.1.7,<9.0.0",
    "inquirer",
    "python-slugify>=8.0.4,<9.0.0",
    
    # Scientific Computing
    "numpy>=2.2.2,<3.0.0",
    "scipy>=1.14.1,<2.0.0",
    "pillow",
    "matplotlib",
    
    # MCP (Model Context Protocol)
    "mcp>=1.0.0,<2.0.0",
    
    # Gradio for UI
    "gradio",
    
    # Evaluation and Analysis
    "ragas>=0.1.0,<1.0.0",
    "krippendorff>=0.8.1,<1.0.0",
    "statsmodels>=0.14.4,<1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx>=0.27.0",
    "factory-boy>=3.2.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]
production = [
    "gunicorn>=21.0.0",
    "prometheus-client>=0.16.0",
    "sentry-sdk[fastapi]>=1.32.0",
]

[project.urls]
Homepage = "https://github.com/videogen/video-generation-agents"
Documentation = "https://videogen.github.io/video-generation-agents"
Repository = "https://github.com/videogen/video-generation-agents"
"Bug Tracker" = "https://github.com/videogen/video-generation-agents/issues"

[project.scripts]
video-gen = "app.main:cli"
video-server = "app.main:run_server"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*", "src*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.toml", "*.txt", "*.md"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "src"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "langchain", "langgraph"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "manim.*",
    "kokoro_onnx.*",
    "gradio.*",
    "chromadb.*",
    "langfuse.*",
    "ragas.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["app", "src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

# Ruff configuration (alternative to flake8)
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.ruff.isort]
known-first-party = ["app", "src"]