<SCENE_VISION_STORYBOARD_PLAN>
[SCENE_VISION]
1.  **Scene Overview**:
    - In this scene, we aim to explain the concept of the derivative by discussing the slope of a function. We'll visualize how to calculate the slope using two points on a function's graph, building on the function's definition from Scene 1.
    - **Visual learning objectives for viewers:** We will use `Axes` to represent the function graph, `Dot` objects to mark the two points, and `Line` to illustrate the connecting line between these points. `MathTex` will be employed to display the rise over run values clearly.
    - The visuals will support learning by providing a clear representation of the slope concept. The `Axes` will be the background, with `Dot` objects representing the points clearly on the graph. The `Line` connecting the two points will help visualize the slope calculation, and using `MathTex` for slope annotations will reinforce the mathematical concepts.
    - Key concepts to emphasize visually include the slope formula (rise/run) using `MathTex`, the two points as `Dot` objects, and the connecting `Line`. We will ensure a minimum spacing of 0.3 units between all elements and adhere to the safe area margins.

[STORYBOARD]
1.  **Visual Flow & Pacing (Manim Animation Sequence)**:
    - Start with the `Axes` being created with `Create(axes)` animation, ensuring it is centered and occupies the safe area margins.
    - **Sub-scene 1: Function Graph**
        - **Visual Element:** `Axes` object representing the function graph.
        - **Animation Sequence:** 
            - `Create(axes)` with a run time of `2`. 
            - Wait for `1` second for clarity.
    
    - **Sub-scene 2: Points on the Graph**
        - **Visual Element:** Two `Dot` objects representing points on the graph at coordinates (1, f(1)) and (3, f(3)).
        - **Animation Sequence:**
            - Create the first point `point_a = Dot(axes.c2p(1, function(1)), color=RED)`.
            - `Create(point_a)` with a run time of `1`.
            - Wait `0.5` seconds.
            - Create the second point `point_b = Dot(axes.c2p(3, function(3)), color=RED)`.
            - `Create(point_b)` with a run time of `1`.
            - Wait `0.5` seconds.

    - **Sub-scene 3: Connecting Line**
        - **Visual Element:** A `Line` object connecting the two points.
        - **Animation Sequence:**
            - Create the line `connecting_line = Line(point_a.get_center(), point_b.get_center())`.
            - `Create(connecting_line)` with a run time of `1`.
            - Wait for `1` second to allow viewers to absorb the connection visually.

    - **Sub-scene 4: Rise over Run Annotations**
        - **Visual Element:** `MathTex` objects for rise and run annotations.
        - **Animation Sequence:**
            - Create `rise = MathTex(r"\text{Rise} = f(3) - f(1)").next_to(connecting_line, UP, buff=0.3)`.
            - `Write(rise)` with a run time of `1`.
            - Create `run = MathTex(r"\text{Run} = 3 - 1").next_to(rise, DOWN, buff=0.3)`.
            - `Write(run)` with a run time of `1`.
            - Wait for `1` second to emphasize the rise/run relationship visually.

    - **Sub-scene 5: Final Slope Annotation**
        - **Visual Element:** Final slope formula as `MathTex`.
        - **Animation Sequence:**
            - Create `slope = MathTex(r"\text{Slope} = \frac{\text{Rise}}{\text{Run}}").to_edge(UP)`.
            - `Write(slope)` with a run time of `1`.
            - Wait `2` seconds to finalize the scene and allow viewers to absorb the information.

    - Ensure all elements respect the safe area margins and maintain a minimum spacing of 0.3 units between each other and the scene edges throughout the animations.

</SCENE_VISION_STORYBOARD_PLAN>